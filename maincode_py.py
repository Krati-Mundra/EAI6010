# -*- coding: utf-8 -*-
"""Maincode.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q2L2qBSuBayqdQ4Oi6bm9aWS9xaZIE_Y
"""

import os
import pickle
import numpy as np
import pandas as pd
from flask import Flask, request, jsonify, render_template

# Initialize Flask app
app = Flask(__name__)

# Load or train the model
if not os.path.exists("model.pkl"):
    from model_training import train_and_save_model
    model_data = train_and_save_model()
    model = model_data['model']
    scaler = model_data['scaler']
    features = model_data['features']
else:
    # Load the model and its metadata
    with open("model.pkl", "rb") as f:
        model_data = pickle.load(f)
        model = model_data['model']
        scaler = model_data['scaler']
        features = model_data['features']

@app.route('/')
def home():
    """Simple home page with UI"""
    return render_template('simple.html')

@app.route('/predict', methods=['POST'])
def predict():
    """
    API endpoint to predict real estate prices
    Expects JSON with house features
    Returns predicted price
    """
    try:
        # Get data from request
        data = request.get_json()

        # Prepare features for prediction
        # Map input fields to model features
        # Our model expects: ['Gr Liv Area', 'Bedroom AbvGr', 'Full Bath', 'Total Bsmt SF', 'Year Built', 'Overall Qual']
        input_features = [
            data.get('square_feet', 0),         # Living area (Gr Liv Area)
            data.get('bedrooms', 0),            # Bedrooms (Bedroom AbvGr)
            data.get('bathrooms', 0),           # Bathrooms (Full Bath)
            data.get('basement_sf', 0),         # Basement square feet (Total Bsmt SF)
            data.get('year_built', 2000),       # Year Built
            data.get('overall_quality', 5)      # Overall Quality (1-10)
        ]

        # Scale the features using the same scaler used during training
        scaled_features = scaler.transform([input_features])

        # Make prediction
        prediction = model.predict(scaled_features)[0]

        # Return prediction
        return jsonify({
            "predicted_price": round(prediction, 2),
            "features_used": {
                "square_feet": input_features[0],
                "bedrooms": input_features[1],
                "bathrooms": input_features[2],
                "basement_sf": input_features[3],
                "year_built": input_features[4],
                "overall_quality": input_features[5]
            }
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 400

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint to verify the API is running"""
    return jsonify({
        "status": "ok",
        "message": "API is running"
    })